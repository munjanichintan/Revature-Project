"C:\Program Files\MongoDB\Server\4.4\bin\mongod"  --dbpath "C:\data\db"

"C:\Program Files\MongoDB\Server\4.4\bin\mongo"

"C:\Program Files\MongoDB\Tools\100\bin\mongoimport" --db products --collection zipcodes --type json --file zips.json

1. Write a MongoDB query to display all the documents in the collection restaurants.
Ans. db.data.find().pretty()

2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
Ans. db.data.find({}, {'restaurant_id': 1, name: 1, borough: 1, cuisine: 1})

3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
Ans. db.data.find({}, {'_id': 0, 'restaurant_id': 1, name: 1, borough: 1, cuisine: 1})

4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
Ans. db.data.find({}, {'_id': 0, 'restaurant_id': 1, name: 1, borough: 1, 'address.zipcode': 1})

5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
Ans. db.data.find({'borough': 'Bronx'}).pretty()

6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
Ans. db.data.find({'borough': 'Bronx'}).limit(5).pretty()

7. Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
Ans. db.data.find({'borough': 'Bronx'}).skip(5).limit(5).pretty()

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.
Ans. db.data.find({'grades.score': {'$gt': 90}}).pretty()

9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
Ans. db.data.find({grades: {'$elemMatch': {'score': {'$gt': 80 , '$lt': 100}}}}).pretty()

10. Write a MongoDB query to find the restaurants which locate in longitude value less than -95.754168.Go to the editor
Latitudes range from -90 to 90, and longitudes range from -180 to 180. [longitude, latitude]
Ans. db.data.find({'address.coord.0': {'$lt': -95.754168}}).pretty()

11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
Ans. db.data.find({'$and': [{'cuisine': {'$ne': 'American '}}, {'grades.score': {'$gt': 70}}, {'address.coord.1': {'$gt': -65.754168}}]}).pretty()

12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
Note : Do this query without using $and operator.
Ans. db.data.find({'cuisine': {'$ne': 'American '}, 'grades.score': {'$gt': 70}, 'address.coord.0': {'$lt': -65.754168}}).pretty()

13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
Ans. db.data.find({'cuisine': {'$ne': 'American '}, 'grades.grade': {'$eq': 'A'}, 'borough': {'$ne': 'Brooklyn'}}).sort({'cuisine': -1}).pretty()

14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
Ans. db.data.find({'name': {'$regex': '^Wil.*'}}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1}).pretty()

15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
Ans. db.data.find({'name': {'$regex': '.*ces$'}}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1}).pretty()

16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
Ans. db.data.find({'name': {'$regex': 'Reg'}}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1}).pretty()

17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
Ans. db.data.find({'borough': 'Bronx', 'cuisine': {'$in': ['American ', 'Chinese']}}).pretty()

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
Ans. db.data.find({'borough': {'$in': ['Staten Island', 'Queens', 'Brooklyn']}}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1})

19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooklyn.
Ans. db.data.find({'borough': {'$nin': ['Staten Island', 'Queens', 'Brooklyn']}}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1})

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
Ans. db.data.find({'grades.score': {'$lte': 10}}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1, 'grades': 1}).pretty()

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinese' or restaurant's name begins with letter 'Wil'.
Ans. db.data.find({'$or': [{'cuisine': {'$nin': ['American ', 'Chinese']}}, {'name': {'$regex': '^Wil.*'}}]}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1})

22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..
Ans. db.data.find({'grades': {'$elemMatch': {'date': ISODate("2014-08-11T00:00:00Z"), 'grade': 'A', 'score': 11}}}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'grades': 1})

23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".
Ans. db.data.find({'grades.1.date': ISODate("2014-08-11T00:00:00Z"), 'grades.1.score': 9, 'grades.1.grade': 'A'}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'borough': 1, 'cuisine': 1})

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52..
Ans. db.data.find({'address.coord.1': {'$gt': 42, '$lte': 52}}, {'_id': 0, 'restaurant_id': 1, 'name': 1, 'address.coord': 1}).pretty()

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.
Ans. db.data.find().sort({'name': 1}).pretty()

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.
Ans. db.data.find().sort({'name': -1}).pretty()

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.
Ans. db.data.find().sort({'cuisine': 1, 'borough': -1}).pretty()

28. Write a MongoDB query to know whether all the addresses contains the street or not.
Ans. db.data.find({'address.street': {'$exists': true}})   # If we need count then use countDocuments()

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.
Ans. db.data.find({'address.coord': {'$type': 'double'}})

30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.
Ans. db.data.find({'grades': {'$elemMatch': {'score': {'$mod': [7, 0]}}}}, {'_id': 0, 'name': 1, 'restaurant_id': 1, 'grades': 1}).pretty()

31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.
Ans. db.data.find({'name': {'$regex': 'mon'}}, {'name': 1, '_id': 0, 'borough': 1, 'address.coord': 1, 'cuisine': 1})

32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.
Ans. db.data.find({'name': {'$regex': '^Mad.*'}}, {'name': 1, '_id': 0, 'borough': 1, 'address.coord': 1, 'cuisine': 1})